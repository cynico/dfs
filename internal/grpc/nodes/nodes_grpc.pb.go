// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: grpc/nodes.proto

package nodes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeRegistrarClient is the client API for NodeRegistrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeRegistrarClient interface {
	RegisterNode(ctx context.Context, in *NodeRegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type nodeRegistrarClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRegistrarClient(cc grpc.ClientConnInterface) NodeRegistrarClient {
	return &nodeRegistrarClient{cc}
}

func (c *nodeRegistrarClient) RegisterNode(ctx context.Context, in *NodeRegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nodes.NodeRegistrar/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRegistrarServer is the server API for NodeRegistrar service.
// All implementations must embed UnimplementedNodeRegistrarServer
// for forward compatibility
type NodeRegistrarServer interface {
	RegisterNode(context.Context, *NodeRegistrationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNodeRegistrarServer()
}

// UnimplementedNodeRegistrarServer must be embedded to have forward compatible implementations.
type UnimplementedNodeRegistrarServer struct {
}

func (UnimplementedNodeRegistrarServer) RegisterNode(context.Context, *NodeRegistrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNodeRegistrarServer) mustEmbedUnimplementedNodeRegistrarServer() {}

// UnsafeNodeRegistrarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRegistrarServer will
// result in compilation errors.
type UnsafeNodeRegistrarServer interface {
	mustEmbedUnimplementedNodeRegistrarServer()
}

func RegisterNodeRegistrarServer(s grpc.ServiceRegistrar, srv NodeRegistrarServer) {
	s.RegisterService(&NodeRegistrar_ServiceDesc, srv)
}

func _NodeRegistrar_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistrarServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodes.NodeRegistrar/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistrarServer).RegisterNode(ctx, req.(*NodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeRegistrar_ServiceDesc is the grpc.ServiceDesc for NodeRegistrar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRegistrar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.NodeRegistrar",
	HandlerType: (*NodeRegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeRegistrar_RegisterNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/nodes.proto",
}

// HeartbeatTrackerClient is the client API for HeartbeatTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatTrackerClient interface {
	HeartbeatTrack(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type heartbeatTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatTrackerClient(cc grpc.ClientConnInterface) HeartbeatTrackerClient {
	return &heartbeatTrackerClient{cc}
}

func (c *heartbeatTrackerClient) HeartbeatTrack(ctx context.Context, in *Heartbeat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nodes.HeartbeatTracker/HeartbeatTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartbeatTrackerServer is the server API for HeartbeatTracker service.
// All implementations must embed UnimplementedHeartbeatTrackerServer
// for forward compatibility
type HeartbeatTrackerServer interface {
	HeartbeatTrack(context.Context, *Heartbeat) (*emptypb.Empty, error)
	mustEmbedUnimplementedHeartbeatTrackerServer()
}

// UnimplementedHeartbeatTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedHeartbeatTrackerServer struct {
}

func (UnimplementedHeartbeatTrackerServer) HeartbeatTrack(context.Context, *Heartbeat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatTrack not implemented")
}
func (UnimplementedHeartbeatTrackerServer) mustEmbedUnimplementedHeartbeatTrackerServer() {}

// UnsafeHeartbeatTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatTrackerServer will
// result in compilation errors.
type UnsafeHeartbeatTrackerServer interface {
	mustEmbedUnimplementedHeartbeatTrackerServer()
}

func RegisterHeartbeatTrackerServer(s grpc.ServiceRegistrar, srv HeartbeatTrackerServer) {
	s.RegisterService(&HeartbeatTracker_ServiceDesc, srv)
}

func _HeartbeatTracker_HeartbeatTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Heartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatTrackerServer).HeartbeatTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodes.HeartbeatTracker/HeartbeatTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatTrackerServer).HeartbeatTrack(ctx, req.(*Heartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

// HeartbeatTracker_ServiceDesc is the grpc.ServiceDesc for HeartbeatTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartbeatTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.HeartbeatTracker",
	HandlerType: (*HeartbeatTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartbeatTrack",
			Handler:    _HeartbeatTracker_HeartbeatTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/nodes.proto",
}

// FileTrackerClient is the client API for FileTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTrackerClient interface {
	TrackFile(ctx context.Context, in *FileOnNode, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fileTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTrackerClient(cc grpc.ClientConnInterface) FileTrackerClient {
	return &fileTrackerClient{cc}
}

func (c *fileTrackerClient) TrackFile(ctx context.Context, in *FileOnNode, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nodes.FileTracker/TrackFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTrackerServer is the server API for FileTracker service.
// All implementations must embed UnimplementedFileTrackerServer
// for forward compatibility
type FileTrackerServer interface {
	TrackFile(context.Context, *FileOnNode) (*emptypb.Empty, error)
	mustEmbedUnimplementedFileTrackerServer()
}

// UnimplementedFileTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedFileTrackerServer struct {
}

func (UnimplementedFileTrackerServer) TrackFile(context.Context, *FileOnNode) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackFile not implemented")
}
func (UnimplementedFileTrackerServer) mustEmbedUnimplementedFileTrackerServer() {}

// UnsafeFileTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTrackerServer will
// result in compilation errors.
type UnsafeFileTrackerServer interface {
	mustEmbedUnimplementedFileTrackerServer()
}

func RegisterFileTrackerServer(s grpc.ServiceRegistrar, srv FileTrackerServer) {
	s.RegisterService(&FileTracker_ServiceDesc, srv)
}

func _FileTracker_TrackFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileOnNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTrackerServer).TrackFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodes.FileTracker/TrackFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTrackerServer).TrackFile(ctx, req.(*FileOnNode))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTracker_ServiceDesc is the grpc.ServiceDesc for FileTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.FileTracker",
	HandlerType: (*FileTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackFile",
			Handler:    _FileTracker_TrackFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/nodes.proto",
}

// NodeReplicationClient is the client API for NodeReplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeReplicationClient interface {
	// Master nodes sends this ReplicateFile to source nodes where the files reside
	InitiateReplication(ctx context.Context, in *InitiateReplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Source nodes sends this rpc to destination nodes where the file will be replicated
	ReplicateFile(ctx context.Context, in *ReplicationRequest, opts ...grpc.CallOption) (*ReplicationResponse, error)
}

type nodeReplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeReplicationClient(cc grpc.ClientConnInterface) NodeReplicationClient {
	return &nodeReplicationClient{cc}
}

func (c *nodeReplicationClient) InitiateReplication(ctx context.Context, in *InitiateReplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nodes.NodeReplication/InitiateReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReplicationClient) ReplicateFile(ctx context.Context, in *ReplicationRequest, opts ...grpc.CallOption) (*ReplicationResponse, error) {
	out := new(ReplicationResponse)
	err := c.cc.Invoke(ctx, "/nodes.NodeReplication/ReplicateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeReplicationServer is the server API for NodeReplication service.
// All implementations must embed UnimplementedNodeReplicationServer
// for forward compatibility
type NodeReplicationServer interface {
	// Master nodes sends this ReplicateFile to source nodes where the files reside
	InitiateReplication(context.Context, *InitiateReplicationRequest) (*emptypb.Empty, error)
	// Source nodes sends this rpc to destination nodes where the file will be replicated
	ReplicateFile(context.Context, *ReplicationRequest) (*ReplicationResponse, error)
	mustEmbedUnimplementedNodeReplicationServer()
}

// UnimplementedNodeReplicationServer must be embedded to have forward compatible implementations.
type UnimplementedNodeReplicationServer struct {
}

func (UnimplementedNodeReplicationServer) InitiateReplication(context.Context, *InitiateReplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateReplication not implemented")
}
func (UnimplementedNodeReplicationServer) ReplicateFile(context.Context, *ReplicationRequest) (*ReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateFile not implemented")
}
func (UnimplementedNodeReplicationServer) mustEmbedUnimplementedNodeReplicationServer() {}

// UnsafeNodeReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeReplicationServer will
// result in compilation errors.
type UnsafeNodeReplicationServer interface {
	mustEmbedUnimplementedNodeReplicationServer()
}

func RegisterNodeReplicationServer(s grpc.ServiceRegistrar, srv NodeReplicationServer) {
	s.RegisterService(&NodeReplication_ServiceDesc, srv)
}

func _NodeReplication_InitiateReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReplicationServer).InitiateReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodes.NodeReplication/InitiateReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReplicationServer).InitiateReplication(ctx, req.(*InitiateReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReplication_ReplicateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReplicationServer).ReplicateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodes.NodeReplication/ReplicateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReplicationServer).ReplicateFile(ctx, req.(*ReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeReplication_ServiceDesc is the grpc.ServiceDesc for NodeReplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeReplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.NodeReplication",
	HandlerType: (*NodeReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateReplication",
			Handler:    _NodeReplication_InitiateReplication_Handler,
		},
		{
			MethodName: "ReplicateFile",
			Handler:    _NodeReplication_ReplicateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/nodes.proto",
}
